#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

int cache[510];
int len;

int recursive(vector<int>&s, vector<int>&v, int len) {
	
	int ret = v.size();
	int pos = v.back();

	if (cache[pos] != -1) {
		return cache[pos];
	}

	for (int i = pos + 1; i < len; i++) {
		if (s[pos] < s[i]) {
			v.push_back(i);
			recursive(s, v, len);
			v.pop_back();
		}
	}

	return cache[pos] = ret; 


}

int main() {

	int C;
	cin >> C;

	for (int i = 0; i < C; i++) {

		memset(cache, -1, sizeof(cache));

		vector<int>s;

		cin >> len;

		for (int j = 0; j < len; j++) {
			int num;
			cin >> num;
			s.push_back(num);
		}

		vector<int>v;

		for (int j = 0; j < len; j++) {
			v.push_back(j);
			recursive(s, v, len);
			v.pop_back();
		}

		int LIS = cache[0];

		for (int j = 1; j < len; j++) {
			LIS = max(LIS, cache[j]);
		}

		cout << LIS << '\n';

	}
}
